// Automatically generated by FrederoxDev/Reverse-Tools/CxxParser/HeaderGenerator.py
#pragma once
#include <vector>

class Dimension;
class BlockSource;
class Block;
class BlockSourceListener;
class EntityContext;
class BlockPos;
class Vec3;
class AutomaticID;
class GetCollisionShapeInterface;
class LevelChunk;
class Material;
class Actor;
class ILevel;
class ChunkSource;
class AABB;
class WeakRefT;
struct ActorBlockSyncMessage;
struct SharePtrRefTraits;
struct Bounds;
enum MaterialType;

class BlockSource {
public:
    virtual ~BlockSource();
    virtual const Block& getBlock(int x, int y, int z) const;
    virtual const Block& getBlock(const BlockPos& pos) const;
    virtual const Block& getBlock(const BlockPos& pos, unsigned int layer) const;

    virtual void filler0(); // Failed to match '_ZNK11BlockSource14getBlockEntityERK8BlockPos'

    virtual const Block& getExtraBlock(const BlockPos& p) const;
    virtual const Block& getLiquidBlock(const BlockPos& p) const;
    virtual bool hasBlock(const BlockPos& pos) const;
    virtual bool containsAnyLiquid(const AABB& box) const;
    virtual bool containsMaterial(const AABB& box, MaterialType material) const;
    virtual bool isUnderWater(const Vec3& pos, const Block& block) const;
    virtual const Material& getMaterial(const BlockPos& pos) const;
    virtual const Material& getMaterial(int x, int y, int z) const;
    virtual bool hasChunksAt(const Bounds& bounds, bool ignoreClientChunk) const;
    virtual bool hasChunksAt(const BlockPos& pos, int r, bool ignoreClientChunk) const;
    virtual bool hasChunksAt(const AABB& bb, bool ignoreClientChunk) const;

    virtual void filler1(); // virtual AutomaticID<Dimension, int> getDimensionId() const;

    virtual void fetchAABBs(std::vector<AABB>& shapes, const AABB& intersectTestBox, bool withUnloadedChunks) const;

    virtual void filler2(); // virtual void fetchCollisionShapes(std::vector<AABB>& shapes, const AABB& box, bool withUnloadedChunks, optional_ref<const GetCollisionShapeInterface> entity) const;
    virtual void filler3(); // virtual AABB getTallestCollisionShape(float*, bool intersectTestBox, optional_ref<const GetCollisionShapeInterface> actualSurfaceOffset) const;
    
    virtual float getBrightness(const BlockPos& pos) const;

    // Renamed because it was getting grouped with the other fetchAABBs when in the original vtable they are seperated
    virtual std::vector<AABB>& fetchAABBs_(const AABB& intersectTestBox, bool withUnloadedChunks);

    virtual void filler4(); // fetchCollisionShapes
    virtual void filler5(); // virtual WeakRefT<SharePtrRefTraits<BlockSource>> getWeakRef();

    virtual void addListener(BlockSourceListener& l);
    virtual void removeListener(BlockSourceListener& l);

    virtual void filler6(); // virtual gsl::span<gsl::not_null<Actor*>, > fetchEntities(const Actor* except, const AABB& bb, bool useHitbox, bool getDisplayEntities);
    virtual void filler7(); // Failed to match '_ZN11BlockSource13fetchEntitiesE9ActorTypeRK4AABBPK5ActorNSt3__18functionIFbPS4_EEE'
    
    virtual bool setBlock(const BlockPos& pos, const Block& block, int updateFlags, const ActorBlockSyncMessage* syncMsg, Actor* blockChangeSource);
    virtual short getMaxHeight() const;
    virtual short getMinHeight() const;

    virtual void filler8(); // Failed to match '_ZNK11BlockSource12getDimensionEv'

    virtual const Dimension& getDimensionConst() const;

    virtual void filler9(); // Failed to match '_ZN11BlockSource12getDimensionEv'

    virtual LevelChunk* getChunkAt(const BlockPos& pos) const;
    virtual ILevel& getILevel() const;

    virtual void filler10();  // virtual std::vector<AABB>& fetchCollisionShapes(const AABB& box, bool, std::optional<const EntityContext>);
    virtual void filler11(); // Failed to match '_ZNK11BlockSource4clipERK4Vec3S2_b9ShapeTypeibbP5ActorRKNSt3__18functionIFbRKS_RK5BlockbEEE'
    
    virtual ChunkSource& getChunkSource();
    virtual bool isSolidBlockingBlock(const BlockPos& p) const;
    virtual bool isSolidBlockingBlock(int x, int y, int z) const;
    virtual bool areChunksFullyLoaded(const BlockPos& pos, int r) const;
    virtual bool canDoBlockDrops() const;
    virtual bool canDoContainedItemDrops() const;
};